apiVersion: install.istio.io/v1alpha3
kind: IstioOperator
metadata:
  name: control-plane
  namespace: istio-system
spec:
  hub: ghcr.io/resf/istio
  components:
    pilot:
      enabled: true
      k8s:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: istiod
                    istio: pilot
                topologyKey: kubernetes.io/hostname
              weight: 100
        resources:
          requests:
            cpu: 32m
            memory: 32Mi
        priorityClassName: system-cluster-critical
        podDisruptionBudget:
          minAvailable: 1
        hpaSpec:
          maxReplicas: 2
          minReplicas: 1
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 0
    ingressGateways:
    - enabled: false
      name: istio-ingressgateway
  meshConfig:
    tcpKeepalive:
      time: 60s
      probes: 3
      interval: 60s
    accessLogFile: /dev/stdout
    accessLogEncoding: JSON
    accessLogFormat: |
      {
        "protocol": "%PROTOCOL%",
        "upstream_service_time": "%RESP(x-envoy-upstream-service-time)%",
        "upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",
        "duration": "%DURATION%",
        "upstream_transport_failure_reason": "%UPSTREAM_TRANSPORT_FAILURE_REASON%",
        "route_name": "%ROUTE_NAME%",
        "downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%",
        "user_agent": "%REQ(USER-AGENT)%",
        "response_code": "%RESPONSE_CODE%",
        "response_flags": "%RESPONSE_FLAGS%",
        "start_time": "%START_TIME%",
        "method": "%REQ(:METHOD)%",
        "request_id": "%REQ(X-REQUEST-ID)%",
        "connection_id": "%CONNECTION_ID%",
        "upstream_host": "%UPSTREAM_HOST%",
        "x_forwarded_for": "%REQ(X-FORWARDED-FOR)%",
        "client_ip": "%REQ(True-Client-Ip)%",
        "requested_server_name": "%REQUESTED_SERVER_NAME%",
        "bytes_received": "%BYTES_RECEIVED%",
        "bytes_sent": "%BYTES_SENT%",
        "upstream_cluster": "%UPSTREAM_CLUSTER%",
        "downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%",
        "authority": "%REQ(:AUTHORITY)%",
        "path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
        "response_code_details": "%RESPONSE_CODE_DETAILS%",
        "connection_termination_details": "%CONNECTION_TERMINATION_DETAILS%",
        "grpc_status_code": "%GRPC_STATUS_NUMBER%"
      }
    dnsRefreshRate: 30s
    defaultConfig:
      terminationDrainDuration: 10s
      holdApplicationUntilProxyStarts: true
      tracing:
        zipkin:
          address: jaeger-collector.observability-system.svc.cluster.local:9411
        sampling: 1.0
      proxyMetadata:
        ISTIO_META_DNS_CAPTURE: "true"
        ISTIO_META_DNS_AUTO_ALLOCATE: "true"
        BOOTSTRAP_XDS_AGENT: "true"
      extraStatTags:
        - request_method
        - route_name
  values:
    global:
      proxy:
        resources:
          requests:
            memory: 32Mi
            cpu: 32m
    telemetry:
      v2:
        prometheus:
          configOverride:
            inboundSidecar:
              debug: false
              stat_prefix: istio
              metrics:
                - dimensions:
                    request_host: request.host
                    request_method: request.method
                    route_name: route_name
            outboundSidecar:
              debug: false
              stat_prefix: istio
              metrics:
                - dimensions:
                    request_host: request.host
                    request_method: request.method
                    route_name: route_name
            gateway:
              debug: false
              stat_prefix: istio
              disable_host_header_fallback: true
              metrics:
                - dimensions:
                    request_host: '(response.code == 403) ? "unknown" : request.host'
                    request_method: request.method
                    route_name: route_name
